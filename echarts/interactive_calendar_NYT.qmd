---
title: "Interactive Calendar of the Sentiment of Articles Published by The New York Times (2020â€“2024)"
author: "Maigan Lafontant, Emilie Ward, and Erika Salvador"
format:
  html:
    include-in-header: fonts.html
---

```{r}
#| label: set-up
# ================================================================
# Step 0: Load Packages and Fonts
# ================================================================

library(tidyverse)
library(tidytext)
library(lubridate)
library(ggiraph)
library(data.table)
library(zoo)
library(ggimage)
library(sysfonts)
library(showtext)
library(htmlwidgets)
library(gdtools)

# Font setup
showtext_auto()
register_gfont("News Cycle")
font_add_google("News Cycle", "News Cycle")  
```

## Step 1. Load and Preprocess The New York Times Sentiment Data

This chunk loads and processes The New York Times article data to compute a daily sentiment score. It uses the AFINN lexicon to assign numeric sentiment values to words and averages them across articles published on the same day.

```{r}
#| label: step-1

# ================================================================
# Step 1: Load and Preprocess The New York Times Sentiment Data
# ================================================================

# Load the wrangled The New York Times News dataset 
nyt <- read_csv("../data/wrangled/nyt_news_data_wrangled.csv")
nyt <- as.data.table(nyt)  # Convert to data.table for faster manipulation

# Tokenize article text into individual words and assign a unique article ID
article_words <- nyt |>
  select(pub_date, text_clean) |>       # Keep only date and cleaned text
  mutate(article_id = row_number()) |>  # Assign unique ID to each article
  unnest_tokens(word, text_clean)       # Tokenize text into unigrams

# Load AFINN sentiment lexicon and join with tokens to assign 
# sentiment values
afinn <- get_sentiments("afinn")

# Aggregate sentiment per article by summing token sentiment scores
article_scores <- article_words |>
  inner_join(afinn, by = "word") |>     # Join sentiment values for
                                        # matched words
  group_by(article_id, pub_date) |>     # Group by article and date
  summarise(article_sentiment = sum(value), .groups = "drop")  
                                        # Sum sentiment scores

# Average sentiment scores per day across all articles published 
# on that day
nyt_sentiment <- article_scores |>
  mutate(pub_day = as.Date(pub_date)) |> # Convert datetime to date
  group_by(pub_day) |>                   # Group by day
  summarise(sentiment_score = mean(article_sentiment), .groups = "drop") |>  # Average sentiment
  rename(date = pub_day) |>              # Rename for clarity
  as.data.table()                        # Final output as data.table
```

## Step 3. Create Calendar and Merge Event Markers

This step constructs a full daily calendar covering the range of article dates. It merges daily sentiment scores into the calendar, fills in gaps using interpolation, and adds metadata like weekday, week number, and year. Key political and judicial events are also added, each tagged with a label and icon path for later visualization.

```{r}
#| label: step-3

# ================================================================
# Step 3: Create Calendar and Merge Event Markers
# ================================================================

# Create a complete sequence of daily dates from the dataset's start to end
calendar_nyt <- data.table(date = seq(min(nyt_sentiment$date), max(nyt_sentiment$date), by = "day"))

# Merge calendar with daily sentiment scores (retain all days, even missing sentiment)
calendar_nyt <- merge(calendar_nyt, nyt_sentiment, by = "date", all.x = TRUE)

# Interpolate missing sentiment scores linearly (for visualization continuity)
calendar_nyt[, sentiment_score := na.approx(sentiment_score, na.rm = FALSE)]

# Replace any remaining NAs (e.g., consecutive NAs at boundaries) with 0
calendar_nyt[is.na(sentiment_score), sentiment_score := 0]

# Extract temporal metadata: year, month, ISO week, weekday (1 = Monday), week of year
calendar_nyt[, `:=` (
  Year       = as.integer(format(date, "%Y")),
  month      = as.integer(format(date, "%m")),
  week       = as.integer(format(date, "%V")),
  weekday    = as.integer(format(date, "%u")),
  weekofyear = as.integer(format(date, "%V"))
)]

# Replace problematic or missing week values with 1 as a fallback
calendar_nyt[is.na(weekofyear) | weekofyear <= 0, weekofyear := 1]

```

## Step 4. Add Tooltip and Data ID Columns 

This step prepares metadata used in interactivity. It assigns an interpretation label to each day's sentiment score, builds a tooltip for hover display, and generates a unique identifier for each calendar cell to enable interactivity in `ggiraph`.

```{r}
#| label: step-4

# ================================================================
# Step 4: Add Tooltip and Data ID Columns
# ================================================================

# Classify sentiment interpretation based on threshold rules:
# >10 = Positive, <-10 = Negative, otherwise = Neutral
calendar_nyt[, interpretation := fifelse(
  sentiment_score > 10, "Positive",              
  fifelse(sentiment_score < -10, "Negative", "Neutral")
)]

# Create HTML-formatted tooltips that show:
# (1) the date, (2) the exact sentiment score, and (3) its interpretation
calendar_nyt[, tooltip := paste0(
  "Date: ", format(date, "%B %d, %Y"), "<br>",
  "Sentiment Score: ", round(sentiment_score, 2), "<br>",
  "Interpretation: ", interpretation
)]

# Generate a unique identifier for each date to enable interactivity
# in ggiraph (used to highlight individual tiles)
calendar_nyt[, data_id := paste0("day_", date)]
```

## 5. Create Interactive Calendar

```{r}
#| label: step-5

# ================================================================
# Step 5: Create Interactive ggplot Calendar
# ================================================================

# Determine the maximum absolute sentiment score across all days
# to center the diverging color scale around zero.
range_max <- ceiling(max(abs(calendar_nyt$sentiment_score), na.rm = TRUE))

# Begin constructing the calendar plot using ggplot2
calendar_plot_nyt <- ggplot(calendar_nyt, aes(x = weekofyear, y = 8 - weekday)) +

  # Plot each day as a tile, colored by sentiment score and made interactive with tooltip
  geom_tile_interactive(
    aes(
      fill = sentiment_score,   # Fill color reflects sentiment score
      tooltip = tooltip,        # Hover text
      data_id = data_id         # ID for interactivity tracking
    ),
    color = "grey90",           # Light gray border around tiles
    size = 0.25,                # Border thickness
    width = 0.95,              # Slight padding to make grid spacing clear
    height = 0.95              # Equal height to width ratio for square-ish tiles
  ) +

  # Use a diverging color scale: red = negative, white = neutral, blue = positive
  scale_fill_gradient2(
    low = "#cf1322",            # Strong negative sentiment color
    mid = "white",             # Neutral midpoint
    high = "#003f5c",           # Strong positive sentiment color
    midpoint = 0,               # Center scale at zero
    limits = c(-range_max, range_max),
    breaks = c(-range_max, 0, range_max),
    labels = c("Negative", "Neutral", "Positive"),
    name = "Sentiment"          # Legend title
  ) +

  # Facet plot vertically by year (one row per year)
  facet_wrap(~Year, ncol = 1, strip.position = "right") +

  # Set Y-axis to show weekday names, reversed for visual clarity
  scale_y_continuous(
    name = NULL,
    breaks = 1:7,
    labels = c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon")
  ) +

  # Set X-axis to show ISO week numbers
  scale_x_continuous(
    name = "Week of Year",
    expand = c(0, 0)  # Remove excess space around axis
  ) +

  # Add a descriptive title
  labs(title = "Sentiment Heatmap of The New York Times Articles") +

  # Apply clean, minimal theme with News Cycle font
  theme_minimal(base_family = "News Cycle") +
  theme(
    legend.position = "bottom",                 # Place legend below plot
    axis.text = element_text(size = 8),         # Small axis labels
    strip.text = element_text(                  # Year facet labels
      size = 13, face = "plain", color = "black"
    ),
    plot.title = element_text(                  # Title formatting
      hjust = 0.5, size = 18, face = "bold"
    ),
    plot.margin = margin(20, 20, 20, 20)        # Padding around plot
  )
```

## Step 6. Render Widget 

```{r}
#| label: step-6

# ================================================================
# Step 6: Render Interactive Widget with girafe
# ================================================================

interactive_calendar <- girafe(
  ggobj = calendar_plot_nyt,  # Pass the ggplot calendar
  options = list(

    # Highlight tile on hover with semi-opacity and thin gray border
    opts_hover(css = "fill-opacity:0.8;stroke:gray;stroke-width:0.4px;"),

    # Style tooltip with white background and rounded corners
    opts_tooltip(css = paste(
      "background-color:white;",
      "padding:5px;",
      "border:1px solid gray;",
      "border-radius:4px;",
      "font-family:'News Cycle';",
      sep = ""
    )),

    # Allow toolbar export as PNG
    opts_toolbar(saveaspng = TRUE),

    # Rescale plot on screen resize
    opts_sizing(rescale = TRUE)
  )
)

# Show the interactive calendar
interactive_calendar

```

## 7. Save as Standalone HTML

We save the interactive chart as a standalone HTML file and manually inject the Google Fonts `<link>` and inline `<style>` to ensure that *News Cycle* is preserved across all environments.

```{r}
#| label: step-7

# ================================================================
# Step 7: Save as Standalone HTML with Embedded Font
# ================================================================

save_nyt_chart <- function(chart, file_path = "interactive_calendar_NYT.html") {
  # Save the widget as a self-contained HTML
  saveWidget(chart, file = file_path, selfcontained = TRUE)

  # Read the HTML content
  html_lines <- readLines(file_path)

  # Font link and inline style to preserve 'News Cycle'
  font_link <- '<link href="https://fonts.googleapis.com/css2?family=News+Cycle&display=swap" rel="stylesheet">'
  font_style <- '<style>body { font-family: "News Cycle", sans-serif; }</style>'

  # Insert after <head>
  insert_at <- grep("<head>", html_lines, fixed = TRUE) + 1
  html_lines <- append(html_lines, values = c(font_link, font_style), after = insert_at)

  # Overwrite the HTML file with injected styles
  writeLines(html_lines, file_path)
}

# Execute the save function
save_nyt_chart(interactive_calendar)
```

