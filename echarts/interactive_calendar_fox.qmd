---
title: "Interactive Calendar of the Sentiment of Articles Published by Fox News (2020–2024)"
author: "Maigan Lafontant, Emilie Ward, and Erika Salvador"
format:
  html:
    include-in-header: fonts.html
---

```{r}
#| label: set-up
# ================================================================
# Step 0: Load Packages and Fonts
# ================================================================

library(tidyverse)
library(tidytext)
library(lubridate)
library(ggiraph)
library(data.table)
library(zoo)
library(ggimage)
library(sysfonts)
library(showtext)
library(htmlwidgets)
library(gdtools)


# Font setup
showtext_auto()
register_gfont("News Cycle")
font_add_google("News Cycle", "News Cycle")  
```

## Step 1. Load and Preprocess Fox News Sentiment Data

This chunk loads and processes Fox News article data to compute a daily sentiment score. It uses the AFINN lexicon to assign numeric sentiment values to words and averages them across articles published on the same day.

```{r}
#| label: step-1

# ================================================================
# Step 1: Load and Preprocess Fox News Sentiment Data
# ================================================================

# Load the wrangled Fox News dataset 
fox <- read_csv("../data/wrangled/fox_news_data_wrangled.csv")
fox <- as.data.table(fox)  # Convert to data.table for faster manipulation

# Tokenize article text into individual words and assign a unique article ID
article_words <- fox |>
  select(pub_date, text_clean) |>       # Keep only date and cleaned text
  mutate(article_id = row_number()) |>  # Assign unique ID to each article
  unnest_tokens(word, text_clean)       # Tokenize text into unigrams

# Load AFINN sentiment lexicon and join with tokens to assign 
# sentiment values
afinn <- get_sentiments("afinn")

# Aggregate sentiment per article by summing token sentiment scores
article_scores <- article_words |>
  inner_join(afinn, by = "word") |>     # Join sentiment values for
                                        # matched words
  group_by(article_id, pub_date) |>     # Group by article and date
  summarise(article_sentiment = sum(value), .groups = "drop")  
                                        # Sum sentiment scores

# Average sentiment scores per day across all articles published 
# on that day
fox_sentiment <- article_scores |>
  mutate(pub_day = as.Date(pub_date)) |> # Convert datetime to date
  group_by(pub_day) |>                   # Group by day
  summarise(sentiment_score = mean(article_sentiment), .groups = "drop") |>  # Average sentiment
  rename(date = pub_day) |>              # Rename for clarity
  as.data.table()                        # Final output as data.table
```

## Step 3. Create Calendar and Merge Event Markers

This step constructs a full daily calendar covering the range of article dates. It merges daily sentiment scores into the calendar, fills in gaps using interpolation, and adds metadata like weekday, week number, and year. Key political and judicial events are also added, each tagged with a label and icon path for later visualization.

```{r}
#| label: step-3

# ================================================================
# Step 3: Create Calendar and Merge Event Markers
# ================================================================

# Create a complete sequence of daily dates from the dataset's 
# start to end
calendar_fox <- data.table(date = seq(min(fox_sentiment$date), max(fox_sentiment$date), by = "day"))

# Merge calendar with daily sentiment scores (retain all days,
# even missing sentiment)
calendar_fox <- merge(calendar_fox, fox_sentiment, 
                      by = "date", all.x = TRUE)

# Interpolate missing sentiment scores linearly (for visualization 
# continuity)
calendar_fox[, sentiment_score := na.approx(sentiment_score, 
                                            na.rm = FALSE)]

# Replace any remaining NAs (e.g., consecutive NAs at 
# boundaries) with 0
calendar_fox[is.na(sentiment_score), sentiment_score := 0]

# Extract temporal metadata: year, month, ISO week, weekday 
# (1 = Monday), week of year
calendar_fox[, `:=` (
  Year       = as.integer(format(date, "%Y")),
  month      = as.integer(format(date, "%m")),
  week       = as.integer(format(date, "%V")),
  weekday    = as.integer(format(date, "%u")),
  weekofyear = as.integer(format(date, "%V"))
)]

# Replace problematic or missing week values with 1 as a fallback
calendar_fox[is.na(weekofyear) | weekofyear <= 0, weekofyear := 1]

# Define a list of key events (e.g., SCOTUS rulings, elections) 
# with labels and dates
event_dates <- data.table(
  date = as.Date(c(
    "2020-09-18", "2021-01-06", "2022-05-02", "2022-06-24",
    "2023-04-07", "2023-08-08", "2024-03-26", "2024-08-19", "2024-11-05")),
  label = c(
    "RBG Dies", "Capitol Riot", "Dobbs Leak", "Roe Overturned",
    "Mifepristone Ruling", "Ohio Ballot Fight", "SCOTUS Hearing",
    "Republican Convention", "US Elections")
)

# Assign a newspaper icon to each event 
# (used in visualization layer)
event_dates[, icon_path := "icons/newspaper.png"]

# Merge event metadata into calendar; only rows with 
# matching event dates get filled
calendar_fox <- merge(calendar_fox, event_dates, 
                      by = "date", all.x = TRUE)

```

## Step 4. Add Tooltip and Data ID Columns

This step prepares metadata used in interactivity. It assigns an interpretation label to each day's sentiment score, builds a tooltip for hover display, and generates a unique identifier for each calendar cell to enable interactivity in `ggiraph`.

```{r}
#| label: step-4

# ================================================================
# Step 4: Add Tooltip and Data ID Columns
# ================================================================

# Classify sentiment interpretation based on sentiment score thresholds
calendar_fox[, interpretation := fifelse(
  sentiment_score > 10, "Positive",              
  fifelse(sentiment_score < -10, "Negative",    
          "Neutral")                             # Otherwise neutral
)]

# Create custom tooltips for interactive display
calendar_fox[, tooltip := fifelse(
  !is.na(label),     # If the row corresponds to a key event
  paste0(
    "<b>", label, "</b><br>",            # Bold event label
    "Date: ", format(date, "%B %d, %Y") # Just show the date
  ),
  paste0(                                # Else, show detailed sentiment info
    "Date: ", format(date, "%B %d, %Y"), "<br>",
    "Sentiment Score: ", round(sentiment_score, 2), "<br>",
    "Interpretation: ", interpretation
  )
)]

# Assign a unique ID for each day (used by girafe to track interactivity)
calendar_fox[, data_id := paste0("day_", date)]
```

## 5. Create Interactive Calendar

```{r}
#| label: step-5

# ================================================================
# Step 5: Create Interactive ggplot Calendar
# ================================================================

# Determine the maximum absolute sentiment score for a symmetric 
# color scale
range_max <- ceiling(max(abs(calendar_fox$sentiment_score), na.rm = TRUE))

# Construct the ggplot calendar heatmap
calendar_plot_fox <- ggplot(calendar_fox, aes(x = weekofyear, y = 8 - weekday)) +

  # Plot each day as an interactive tile with sentiment fill and tooltip
  geom_tile_interactive(
    aes(
      fill = sentiment_score,
      tooltip = tooltip,
      data_id = data_id
    ),
    color = "grey90",     # Tile border color
    size = 0.25,          # Border thickness
    width = 0.95,         # Tile width (to reduce white space)
    height = 0.95         # Tile height
  ) +

  # Overlay event icons (e.g., SCOTUS decisions) using local PNG path
  ggimage::geom_image(
    aes(image = icon_path),
    size = 0.085,         # Icon scaling factor
    asp = 1.5,            # Aspect ratio for better vertical alignment
    na.rm = TRUE          # Skip missing icons
  ) +

  # Configure fill color scale for sentiment: red = negative, blue = positive
  scale_fill_gradient2(
    low = "#cf1322",      # Negative sentiment
    mid = "white",        # Neutral sentiment
    high = "#003f5c",     # Positive sentiment
    midpoint = 0,
    limits = c(-range_max, range_max),
    breaks = c(-range_max, 0, range_max),
    labels = c("Negative", "Neutral", "Positive"),
    name = "Sentiment"
  ) +

  # Create a vertical panel for each year (faceted by year)
  facet_wrap(~Year, ncol = 1, strip.position = "right") +

  # Set vertical axis: 1 = Sunday, 7 = Saturday (flipped for better layout)
  scale_y_continuous(
    name = NULL,
    breaks = 1:7,
    labels = c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon")
  ) +

  # Set horizontal axis to represent ISO weeks
  scale_x_continuous(
    name = "Week of Year",
    expand = c(0, 0)      # Remove extra spacing around axes
  ) +

  # Add a title and theme
  labs(title = "Sentiment Heatmap of Fox News Abortion Articles (2020–2024)") +

  # Apply a clean, minimal theme with custom font and spacing
  theme_minimal(base_family = "News Cycle") +
  theme(
    legend.position = "bottom",                # Place legend below the plot
    axis.text = element_text(size = 8),        # Smaller axis font
    strip.text = element_text(
      size = 13, face = "plain", color = "black"  # Year panel labels
    ),
    plot.title = element_text(
      hjust = 0.5, size = 18, face = "bold"    # Centered bold title
    ),
    plot.margin = margin(20, 20, 20, 20)       # Breathing space around the plot
  )

```

## Step 6. Render Widget

```{r}
#| label: step-6

# ================================================================
# Step 6: Render Interactive Widget with girafe
# ================================================================

interactive_calendar <- girafe(
  ggobj = calendar_plot_fox,  # Pass the ggplot calendar
  options = list(

    # Highlight tile on hover with semi-opacity and thin gray border
    opts_hover(css = "fill-opacity:0.8;stroke:gray;stroke-width:0.4px;"),

    # Style tooltip with white background and rounded corners
    opts_tooltip(css = paste(
      "background-color:white;",
      "padding:5px;",
      "border:1px solid gray;",
      "border-radius:4px;",
      "font-family:'News Cycle';",
      sep = ""
    )),

    # Allow toolbar export as PNG
    opts_toolbar(saveaspng = TRUE),

    # Rescale plot on screen resize
    opts_sizing(rescale = TRUE)
  )
)

# Show the interactive calendar
interactive_calendar

```

## 7. Save as Standalone HTML

We save the interactive chart as a standalone HTML file and manually inject the Google Fonts `<link>` and inline `<style>` to ensure that *News Cycle* is preserved across all environments.

```{r}
#| label: step-7

# ================================================================
# Step 7: Save as Standalone HTML with Embedded Font
# ================================================================

save_fox_chart <- function(chart, file_path = "fox_sentiment_calendar.html") {
  # Save the widget as a self-contained HTML
  saveWidget(chart, file = file_path, selfcontained = TRUE)

  # Read the HTML content
  html_lines <- readLines(file_path)

  # Font link and inline style to preserve 'News Cycle'
  font_link <- '<link href="https://fonts.googleapis.com/css2?family=News+Cycle&display=swap" rel="stylesheet">'
  font_style <- '<style>body { font-family: "News Cycle", sans-serif; }</style>'

  # Insert after <head>
  insert_at <- grep("<head>", html_lines, fixed = TRUE) + 1
  html_lines <- append(html_lines, values = c(font_link, font_style), after = insert_at)

  # Overwrite the HTML file with injected styles
  writeLines(html_lines, file_path)
}

# Execute the save function
save_fox_chart(interactive_calendar)
```

# 
